---
export interface Props {
  intensity?: 'low' | 'medium' | 'high';
  duration?: number;
  trigger?: 'hover' | 'scroll' | 'auto';
  className?: string;
}

const { 
  intensity = 'medium', 
  duration = 300, 
  trigger = 'auto',
  className = '' 
} = Astro.props;

const intensityMap = {
  low: 4,
  medium: 8,
  high: 16
};

const glitchIntensity = intensityMap[intensity];
---

<div class={`glitch-container ${className}`} data-trigger={trigger} data-duration={duration}>
  <slot />
</div>

<style define:vars={{ glitchIntensity: `${glitchIntensity}px`, duration: `${duration}ms` }}>
  .glitch-container {
    position: relative;
    display: inline-block;
    overflow: hidden;
    color: #bbff00;
    font-size: clamp(1.2rem, 2vw, 3rem);
    font-family: Impact, Haettenschweiler, sans-serif;
    transform: scaleY(2);
    padding: 0 1rem;
  }

  .glitch-container h2 {
  color: $secondary-scream;

  text-shadow:
    0 0 8px $secondary-scream,
    0 0 16px $secondary-scream;
}

  .glitch-container.active {
    animation: sophisticated-glitch var(--duration) ease-in-out;
  }

  .glitch-container.active::before,
  .glitch-container.active::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: inherit;
    z-index: 2;
    mix-blend-mode: multiply;
  }

  .glitch-container.active::before {
    animation: glitch-red var(--duration) ease-in-out;
    background: #e90000;
    clip-path: polygon(0 0, 100% 0, 100% 45%, 0 45%);
  }

  .glitch-container.active::after {
    animation: glitch-green var(--duration) ease-in-out;
    background: #bbff00;
    clip-path: polygon(0 55%, 100% 55%, 100% 100%, 0 100%);
  }

  @keyframes sophisticated-glitch {
    0% {
      transform: translateX(0);
      filter: hue-rotate(0deg) contrast(1) brightness(1);
    }
    10% {
      transform: translateX(calc(var(--glitchIntensity) * -1));
      filter: hue-rotate(90deg) contrast(1.5) brightness(0.8);
    }
    20% {
      transform: translateX(var(--glitchIntensity));
      filter: hue-rotate(180deg) contrast(0.8) brightness(1.2);
    }
    30% {
      transform: translateX(calc(var(--glitchIntensity) * -0.5));
      filter: hue-rotate(270deg) contrast(1.2) brightness(0.9);
    }
    40% {
      transform: translateX(calc(var(--glitchIntensity) * 0.3));
      filter: hue-rotate(360deg) contrast(0.6) brightness(1.3);
    }
    50% {
      transform: translateX(calc(var(--glitchIntensity) * -0.8));
      filter: hue-rotate(45deg) contrast(1.8) brightness(0.7);
    }
    60% {
      transform: translateX(calc(var(--glitchIntensity) * 0.6));
      filter: hue-rotate(135deg) contrast(1.1) brightness(1.1);
    }
    70% {
      transform: translateX(calc(var(--glitchIntensity) * -0.2));
      filter: hue-rotate(225deg) contrast(0.9) brightness(0.95);
    }
    80% {
      transform: translateX(calc(var(--glitchIntensity) * 0.4));
      filter: hue-rotate(315deg) contrast(1.3) brightness(1.05);
    }
    90% {
      transform: translateX(calc(var(--glitchIntensity) * -0.1));
      filter: hue-rotate(180deg) contrast(1.1) brightness(0.9);
    }
    100% {
      transform: translateX(0);
      filter: hue-rotate(0deg) contrast(1) brightness(1);
    }
  }

  @keyframes glitch-red {
    0% {
      transform: translateX(0) scaleX(1);
      opacity: 0.8;
    }
    15% {
      transform: translateX(calc(var(--glitchIntensity) * 0.5)) scaleX(0.95);
      opacity: 0.9;
    }
    30% {
      transform: translateX(calc(var(--glitchIntensity) * -0.3)) scaleX(1.05);
      opacity: 0.7;
    }
    45% {
      transform: translateX(calc(var(--glitchIntensity) * 0.2)) scaleX(0.98);
      opacity: 0.85;
    }
    60% {
      transform: translateX(calc(var(--glitchIntensity) * -0.4)) scaleX(1.02);
      opacity: 0.75;
    }
    75% {
      transform: translateX(calc(var(--glitchIntensity) * 0.1)) scaleX(0.99);
      opacity: 0.8;
    }
    90% {
      transform: translateX(calc(var(--glitchIntensity) * -0.1)) scaleX(1.01);
      opacity: 0.85;
    }
    100% {
      transform: translateX(0) scaleX(1);
      opacity: 0.8;
    }
  }

  @keyframes glitch-green {
    0% {
      transform: translateX(0) scaleX(1);
      opacity: 0.6;
    }
    20% {
      transform: translateX(calc(var(--glitchIntensity) * -0.4)) scaleX(1.03);
      opacity: 0.8;
    }
    35% {
      transform: translateX(calc(var(--glitchIntensity) * 0.6)) scaleX(0.97);
      opacity: 0.5;
    }
    50% {
      transform: translateX(calc(var(--glitchIntensity) * -0.2)) scaleX(1.01);
      opacity: 0.75;
    }
    65% {
      transform: translateX(calc(var(--glitchIntensity) * 0.3)) scaleX(0.99);
      opacity: 0.65;
    }
    80% {
      transform: translateX(calc(var(--glitchIntensity) * -0.1)) scaleX(1.02);
      opacity: 0.7;
    }
    95% {
      transform: translateX(calc(var(--glitchIntensity) * 0.05)) scaleX(0.995);
      opacity: 0.6;
    }
    100% {
      transform: translateX(0) scaleX(1);
      opacity: 0.6;
    }
  }

  /* Hover trigger */
  .glitch-container[data-trigger="hover"]:hover {
    animation: sophisticated-glitch var(--duration) ease-in-out;
  }

  .glitch-container[data-trigger="hover"]:hover::before,
  .glitch-container[data-trigger="hover"]:hover::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: inherit;
    z-index: 2;
    mix-blend-mode: multiply;
  }

  .glitch-container[data-trigger="hover"]:hover::before {
    animation: glitch-red var(--duration) ease-in-out;
    background: #e90000;
    clip-path: polygon(0 0, 100% 0, 100% 45%, 0 45%);
  }

  .glitch-container[data-trigger="hover"]:hover::after {
    animation: glitch-green var(--duration) ease-in-out;
    background: #bbff00;
    clip-path: polygon(0 55%, 100% 55%, 100% 100%, 0 100%);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .glitch-container {
      --glitchIntensity: calc(var(--glitchIntensity) * 0.5);
    }
  }
</style>

<script>
  class GlitchTransition {
    constructor(element: HTMLElement) {
      this.element = element;
      this.trigger = element.dataset.trigger || 'auto';
      this.duration = parseInt(element.dataset.duration || '300');
      this.init();
    }

    private element: HTMLElement;
    private trigger: string;
    private duration: number;

    init() {
      if (this.trigger === 'scroll') {
        this.setupScrollTrigger();
      } else if (this.trigger === 'auto') {
        this.setupAutoTrigger();
      }
    }

    private setupScrollTrigger() {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              this.triggerGlitch();
            }
          });
        },
        { threshold: 0.1 }
      );

      observer.observe(this.element);
    }

    private setupAutoTrigger() {
      // Random glitch every 8-15 seconds
      const randomInterval = () => {
        const interval = Math.random() * 7000 + 8000;
        setTimeout(() => {
          if (Math.random() > 0.3) {
            this.triggerGlitch();
          }
          randomInterval();
        }, interval);
      };

      randomInterval();
    }

    private triggerGlitch() {
      this.element.classList.add('active');
      
      setTimeout(() => {
        this.element.classList.remove('active');
      }, this.duration);
    }
  }

  // Initialize all glitch containers
  document.addEventListener('DOMContentLoaded', () => {
    const glitchContainers = document.querySelectorAll<HTMLElement>('.glitch-container');
    glitchContainers.forEach(container => {
      new GlitchTransition(container);
    });
  });

  // Re-initialize on page transitions
  document.addEventListener('astro:page-load', () => {
    const glitchContainers = document.querySelectorAll<HTMLElement>('.glitch-container');
    glitchContainers.forEach(container => {
      new GlitchTransition(container);
    });
  });
</script>